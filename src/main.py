import pygame
from enum import Enum, auto
import numpy as np
import threading
import scipy.signal as signal

class Status(Enum):
    NORMAL = auto()
    DEADING = auto()
    DEAD = auto()
    TREADING = auto()
    SLIDING = auto()
    FLYING = auto()
    GROWING = auto()
    SHRINKING = auto()

# 画面サイズ
W = 320
H = 270

# 画面のタイル数
TILE_X = 16
TILE_Y = 14

# 点数の配列
SCORE_ARRAY = [100, 200, 400, 500, 800, 1000, 2000, 4000, 5000, 8000]
ONEUP_SCORE = 9999

class Map():
    ''' マップクラス
    '''
    NOMOVE_X = 100
    WIDTH = 20
    HEIGHT = 20
    BLOCK_VY = 5
    BLOCK_WALL = 1
    BLOCK_NORMAL = 2
    BLOCK_HATENA = 3
    BLOCK_PANEL = 4
    BLOCK_DOKAN1 = 5
    BLOCK_DOKAN2 = 6
    BLOCK_DOKAN3 = 7
    BLOCK_DOKAN4 = 8
    BLOCK_WALL2 = 9
    BACK_KUMO1 = 0x0A
    BACK_KUMO2 = 0x0B
    BACK_KUMO3 = 0x0C
    BACK_KUMO4 = 0x0D
    BACK_KUMO5 = 0x0E
    BACK_KUMO6 = 0x0F
    BACK_MORI1 = 0x10
    BACK_MORI2 = 0x11
    BACK_MORI3 = 0x12
    BACK_MOUNT1 = 0x13
    BACK_MOUNT2 = 0x14
    BACK_MOUNT3 = 0x15
    BACK_MOUNT4 = 0x16
    BACK_MOUNT5 = 0x17
    BACK_MOUNT6 = 0x18

    PUSHED_BLOCKS = [BLOCK_NORMAL, BLOCK_HATENA]

    def __init__(self, win, group, groupback):
        # 画面を設定
        self.__win = win
        # マリオを定義
        self.__mario = None
        # グループを保持する
        self.__group = group
        self.__groupback = groupback
        # マップを定義
        # TODO: ファイル化する
        self.__data = [
            [0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000],
            [0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x008A, 0x008B, 0x008C, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x008A, 0x008B, 0x008B, 0x008C, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x008A, 0x008B, 0x008C, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x008A, 0x008B, 0x008B, 0x008C, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x008A, 0x008B, 0x008C, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x008A, 0x008B, 0x008B, 0x008C, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x008A, 0x008B, 0x008C, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x008A, 0x008B, 0x008B, 0x008C, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x008A, 0x008B, 0x008C, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000],
            [0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x008D, 0x008E, 0x008F, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x008A, 0x008B, 0x008B, 0x008B, 0x008C, 0x0000, 0x0000, 0x0000, 0x0000, 0x008D, 0x008E, 0x008E, 0x008F, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x008A, 0x008B, 0x008C, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x008D, 0x008E, 0x008F, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x008A, 0x008B, 0x008B, 0x008B, 0x008C, 0x0000, 0x0000, 0x0000, 0x0000, 0x008D, 0x008E, 0x008E, 0x008F, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x008A, 0x008B, 0x008C, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x008D, 0x008E, 0x008F, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x008A, 0x008B, 0x008B, 0x008B, 0x008C, 0x0000, 0x0000, 0x0000, 0x0000, 0x008D, 0x008E, 0x008E, 0x008F, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x008A, 0x008B, 0x008C, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x008D, 0x008E, 0x008F, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x008A, 0x008B, 0x008B, 0x008B, 0x008C, 0x0000, 0x0000, 0x0000, 0x0000, 0x008D, 0x008E, 0x008E, 0x008F, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x008A, 0x008B, 0x008C, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x008D, 0x008E, 0x008F, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000],
            [0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x008A, 0x008B, 0x008C, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x008D, 0x008E, 0x008E, 0x008E, 0x008F, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x008D, 0x008E, 0x008F, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x008D, 0x008E, 0x008E, 0x008E, 0x008F, 0x0100, 0x0100, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x008D, 0x008E, 0x008F, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x008D, 0x008E, 0x008E, 0x008E, 0x008F, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x008D, 0x008E, 0x008F, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x008D, 0x008E, 0x008E, 0x008E, 0x008F, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x008D, 0x008E, 0x008F, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000],
            [0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x000D, 0x000E, 0x000F, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0503, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000, 0x0000, 0x0000, 0x0002, 0x0002, 0x0002, 0x0503, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0303, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0x0000, 0x0000, 0x0000, 0x0002, 0x0503, 0x0503, 0x0002, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0009, 0x0009, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000],
            [0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0009, 0x0009, 0x0009, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000],
            [0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0009, 0x0009, 0x0009, 0x0009, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000],
            [0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000],
            [0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0503, 0x0000, 0x0000, 0x0000, 0x0002, 0x0303, 0x0002, 0x0503, 0x0002, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0005, 0x0006, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0005, 0x0006, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0002, 0x0303, 0x0002, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0002, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0002, 0x0403, 0x0000, 0x0000, 0x0000, 0x0000, 0x0503, 0x0000, 0x0000, 0x0503, 0x0000, 0x0000, 0x0503, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0002, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0002, 0x0002, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0009, 0x0000, 0x0000, 0x0009, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0009, 0x0009, 0x0000, 0x0000, 0x0009, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0002, 0x0002, 0x0503, 0x0002, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000],
            [0x0000, 0x0000, 0x0093, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0005, 0x0006, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0007, 0x0008, 0x0000, 0x0000, 0x0093, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0007, 0x0008, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0093, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0009, 0x0009, 0x0000, 0x0000, 0x0009, 0x0009, 0x0000, 0x0000, 0x0000, 0x0000, 0x0093, 0x0000, 0x0000, 0x0000, 0x0009, 0x0009, 0x0009, 0x0000, 0x0000, 0x0009, 0x0009, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0000, 0x0000, 0x0000, 0x0000, 0x0093, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000],
            [0x0000, 0x0094, 0x0096, 0x0095, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0093, 0x0000, 0x0000, 0x0000, 0x0000, 0x0200, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0007, 0x0008, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0007, 0x0008, 0x0000, 0x0094, 0x0096, 0x0095, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0007, 0x0008, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0093, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0094, 0x0096, 0x0095, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0200, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0093, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0009, 0x0009, 0x0009, 0x0000, 0x0000, 0x0009, 0x0009, 0x0009, 0x0000, 0x0000, 0x0094, 0x0096, 0x0095, 0x0000, 0x0009, 0x0009, 0x0009, 0x0009, 0x0000, 0x0000, 0x0009, 0x0009, 0x0009, 0x0000, 0x0000, 0x0000, 0x0093, 0x0000, 0x0000, 0x0005, 0x0006, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0005, 0x0006, 0x0000, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0000, 0x0000, 0x0000, 0x0094, 0x0096, 0x0095, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0093, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000],
            [0x0094, 0x0096, 0x0097, 0x0098, 0x0095, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0090, 0x0091, 0x0091, 0x0091, 0x0092, 0x0094, 0x0096, 0x0095, 0x0000, 0x0000, 0x0000, 0x0000, 0x0190, 0x0191, 0x0192, 0x0100, 0x0100, 0x0100, 0x0100, 0x0100, 0x0100, 0x0100, 0x0100, 0x0100, 0x0100, 0x0100, 0x0100, 0x0007, 0x0008, 0x0100, 0x0090, 0x0091, 0x0091, 0x0092, 0x0000, 0x0007, 0x0008, 0x0094, 0x0096, 0x0097, 0x0198, 0x0195, 0x0000, 0x0000, 0x0000, 0x0000, 0x0007, 0x0008, 0x0090, 0x0091, 0x0091, 0x0091, 0x0092, 0x0094, 0x0096, 0x0095, 0x0000, 0x0000, 0x0000, 0x0000, 0x0090, 0x0091, 0x0092, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0090, 0x0091, 0x0091, 0x0092, 0x0000, 0x0000, 0x0000, 0x0094, 0x0096, 0x0197, 0x0198, 0x0095, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0090, 0x0091, 0x0091, 0x0091, 0x0092, 0x0094, 0x0096, 0x0095, 0x0100, 0x0100, 0x0000, 0x0000, 0x0090, 0x0091, 0x0092, 0x0000, 0x0000, 0x0100, 0x0100, 0x0000, 0x0100, 0x0100, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0009, 0x0009, 0x0009, 0x0009, 0x0091, 0x0091, 0x0009, 0x0009, 0x0009, 0x0009, 0x0094, 0x0096, 0x0097, 0x0098, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0000, 0x0000, 0x0009, 0x0009, 0x0009, 0x0009, 0x0092, 0x0094, 0x0096, 0x0095, 0x0000, 0x0007, 0x0008, 0x0000, 0x0000, 0x0090, 0x0091, 0x0092, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0100, 0x0100, 0x0000, 0x0000, 0x0007, 0x0008, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0000, 0x0000, 0x0094, 0x0096, 0x0097, 0x0098, 0x0095, 0x0000, 0x0009, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0092, 0x0094, 0x0096, 0x0095, 0x0000, 0x0000, 0x0000, 0x0000, 0x0090, 0x0091, 0x0092, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000],
            [0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0000, 0x0000, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0000, 0x0000, 0x0000, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0000, 0x0000, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001],
            [0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0000, 0x0000, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0000, 0x0000, 0x0000, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0000, 0x0000, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001],
            [0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000],
            [0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000]
        ]
        # マップの画像
        # TODO: インデックスの見直し必要
        self.__imgs = {
            self.BLOCK_WALL: pygame.image.load('assets/wall.png'),
            self.BLOCK_NORMAL: pygame.image.load('assets/block.png'),
            self.BLOCK_HATENA: pygame.image.load('assets/hatena.png'),
            self.BLOCK_PANEL: pygame.image.load('assets/panel.png'),
            self.BLOCK_DOKAN1: pygame.image.load('assets/dokan001.png'),
            self.BLOCK_DOKAN2: pygame.image.load('assets/dokan002.png'),
            self.BLOCK_DOKAN3: pygame.image.load('assets/dokan003.png'),
            self.BLOCK_DOKAN4: pygame.image.load('assets/dokan004.png'),
            self.BLOCK_WALL2: pygame.image.load('assets/wall002.png'),
            self.BACK_KUMO1: pygame.image.load('assets/kumo0001.png'),
            self.BACK_KUMO2: pygame.image.load('assets/kumo0002.png'),
            self.BACK_KUMO3: pygame.image.load('assets/kumo0003.png'),
            self.BACK_KUMO4: pygame.image.load('assets/kumo0004.png'),
            self.BACK_KUMO5: pygame.image.load('assets/kumo0005.png'),
            self.BACK_KUMO6: pygame.image.load('assets/kumo0006.png'),
            self.BACK_MORI1: pygame.image.load('assets/mori0001.png'),
            self.BACK_MORI2: pygame.image.load('assets/mori0002.png'),
            self.BACK_MORI3: pygame.image.load('assets/mori0003.png'),
            self.BACK_MOUNT1: pygame.image.load('assets/mountain001.png'),
            self.BACK_MOUNT2: pygame.image.load('assets/mountain002.png'),
            self.BACK_MOUNT3: pygame.image.load('assets/mountain003.png'),
            self.BACK_MOUNT4: pygame.image.load('assets/mountain004.png'),
            self.BACK_MOUNT5: pygame.image.load('assets/mountain005.png'),
            self.BACK_MOUNT6: pygame.image.load('assets/mountain006.png'),
        }
        self.__drawmargin = 0
        self.__nowx = 0
        self.__pushedblocks = {}
        self.__sound = Sound()
    
    @property
    def nowx(self):
        ''' マップの左端のX座標取得
        '''
        return self.__nowx
    
    @property
    def mario(self):
        return self.__mario
    
    @mario.setter
    def mario(self, value):
        self.__mario = value
    
    @property
    def sound(self):
        return self.__sound

    @property
    def group(self):
        return self.__group
    
    def getmapdata(self, x, y):
        return self.__data[y][x] & 0x7F
    
    def ismapback(self, x, y):
        return self.__data[y][x] & 0x80 != 0
    
    def setmapdata(self, x, y, val):
        self.__data[y][x] = (self.__data[y][x] & 0xF0) | (val & 0xFF)

    def getupper(self, n):
        return (n >> 8) & 0xFF
    
    def getenemydata(self, x, y):
        return self.getupper(self.__data[y][x])
    
    def setenemydata(self, x, y, val):
        self.__data[y][x] = (self.__data[y][x] &0xFF) | (val & 0xFF00)

    def draw(self, rect):
        ''' 描画
        '''
        if rect.x <= self.NOMOVE_X + self.__nowx:
            startx = self.__nowx // self.WIDTH
            margin = self.__nowx % self.WIDTH
        else:
            startx = (rect.x - self.NOMOVE_X) // self.WIDTH
            if len(self.__data[0]) - startx > TILE_X:
                margin = rect.x % self.WIDTH
            else:
                startx = len(self.__data[0]) - TILE_X
                margin = 0
        
        self.__drawmargin = -startx * self.WIDTH - margin
        self.__nowx = startx * self.WIDTH + margin

        # 敵を出現させる
        enemycol = [self.getupper(self.__data[yidx][startx + TILE_X]) for yidx in range(16)]
        x = (startx + TILE_X) * self.WIDTH
        for yidx, dte in enumerate(enemycol):
            if dte != 0:
                if dte == 1:
                    self.__group.add(Kuribo(self.__win, x, yidx * self.HEIGHT, -2, self, self.__mario))
                    self.setenemydata(startx + TILE_X, yidx, 0)
                elif dte == 2:
                    self.__group.add(Kame(self.__win, x, yidx * self.HEIGHT, -2, self, self.__mario))
                    self.setenemydata(startx + TILE_X, yidx, 0)
                elif dte == 3:
                    self.__groupback.add(Kinoko(self.__win, x, yidx * self.HEIGHT, 3, self, self.__mario))
                    self.setenemydata(startx + TILE_X, yidx, 0)
                elif dte == 4:
                    self.__groupback.add(Star(self.__win, x, yidx * self.HEIGHT, 3, self, self.__mario))
                    self.setenemydata(startx + TILE_X, yidx, 0)
                elif dte == 5:
                    self.__groupback.add(Coin(self.__win, x, yidx * self.HEIGHT, 0, self, self.__mario))
                    self.setenemydata(startx + TILE_X, yidx, 0)

        # びよ~んブロックのY座標を計算する
        delkeys = []
        for key in self.__pushedblocks:
            blockydata = (self.__pushedblocks[key][0] + 1, self.__pushedblocks[key][1] + self.__pushedblocks[key][0] + 1)
            self.__pushedblocks[key] = blockydata
            if self.__pushedblocks[key][0] >= self.BLOCK_VY:
                delkeys.append(key)
        for key in delkeys:
            del self.__pushedblocks[key]

        # マップを描画
        for y in range(14):
            for x in range(startx, min(startx + TILE_X + 1, len(self.__data[y]))):
                mapno = self.getmapdata(x, y)
                if mapno > 0:
                    ymargin = 0
                    if (y, x) in self.__pushedblocks:
                        ymargin = self.__pushedblocks[(y, x)][1]
                    self.__win.blit(self.__imgs[mapno], ((x - startx) * 20 - margin, y * 20 + ymargin))
    
    def chk_collision(self, rect, ismario = False):
        ''' 衝突チェック
        '''
        # 左上が所属するマップのインデックスを取得
        xidx = rect.x // self.WIDTH
        yidx = rect.y // self.HEIGHT
        # 左上座標の所属するタイルと右と下と斜め下のタイルの衝突チェック
        for y in range(2 + (1 if rect.height > self.HEIGHT else 0)):
            hitleft = False
            hitright = False
            blockrectL = pygame.Rect(xidx * self.WIDTH, (yidx + y) * self.HEIGHT, self.WIDTH, self.HEIGHT)
            blockrectR = pygame.Rect((xidx + 1) * self.WIDTH, (yidx + y) * self.HEIGHT, self.WIDTH, self.HEIGHT)
            if (self.getmapdata(xidx, yidx + y)) and not self.ismapback(xidx, yidx + y) and rect.colliderect(blockrectL):
                hitleft = True
            if (self.getmapdata(xidx + 1, yidx + y)) and not self.ismapback(xidx + 1, yidx + y) and rect.colliderect(blockrectR):
                hitright = True
            
            x = 0
            if hitleft and hitright:
                # マリオの位置によってどちらのブロックにヒットしたかを変える
                if rect.x < blockrectL.centerx:
                    blockrect = blockrectL
                else:
                    blockrect = blockrectR
                    x = 1
            elif hitleft:
                blockrect = blockrectL
            elif hitright:
                x = 1
                blockrect = blockrectR
            else:
                continue

            if ismario:
                mapid = self.getmapdata(xidx + x, yidx + y)
                if mapid in self.PUSHED_BLOCKS and rect.y > blockrect.y:
                    if abs(blockrect.centerx - rect.centerx) < 10:
                        if mapid == self.BLOCK_NORMAL and self.__mario.isbig:
                            self.setmapdata(xidx + x, yidx + y,  0)
                            bx = (xidx + x) * self.WIDTH
                            by = (yidx + y) * self.HEIGHT
                            self.__group.add(BrokenBlock(self.__win, bx, by, 3, -10, self))
                            self.__group.add(BrokenBlock(self.__win, bx, by, -3, -10, self))
                            self.__group.add(BrokenBlock(self.__win, bx, by, 3, -5, self))
                            self.__group.add(BrokenBlock(self.__win, bx, by, -3, -5, self))
                        else:
                            self.__pushedblocks[(yidx + y, xidx + x)] = (-1 * self.BLOCK_VY, 0)
                            # はてなブロックをパネルに変更
                            if self.getmapdata(xidx + x, yidx + y) == self.BLOCK_HATENA:
                                self.setmapdata(xidx + x, yidx + y, self.BLOCK_PANEL)
            return (yidx + y, xidx + x)
        
        return None
    
    def get_drawx(self, rect):
        ''' マリオ描画時のx座標を取得
        '''
        if rect.left < self.NOMOVE_X + self.__nowx:
            # 左端はスクロースさせない
            x = rect.left - self.__nowx
        elif rect.left >= (len(self.__data[0]) - (TILE_X - self.NOMOVE_X // self.WIDTH)) * self.WIDTH:
            # 右端もスクロールさせない
            x = rect.left - (len(self.__data[0]) - (TILE_X - self.NOMOVE_X // self.WIDTH)) * self.WIDTH + self.NOMOVE_X
        else:
            # スクロールする際のXは固定
            x = self.NOMOVE_X
        
        return x
    
    def get_drawenemyx(self, rect):
        ''' 敵描画時のx座標を取得
        '''
        return rect.left + self.__drawmargin

    def ispushblock(self, yx):
        ''' 跳ね上げ対象かどうか
        '''
        return yx in self.__pushedblocks and self.__pushedblocks[yx][0] < 0

class Mario(pygame.sprite.Sprite):
    ''' マリオのクラス
    '''
    IMG_IDX_DEAD = 5
    MAX_SPEED_X  = 5
    DASH_SPEED_X = 8
    ACC_SPEED_X  = 0.25
    MAX_JUMP_Y   = 7
    DASH_JUMP_Y  = 10
    WALK_ANIME_IDX = [2, 2, 1, 1, 3, 3]
    WALK_BIG_ANIME_IDX = [8, 8, 10, 10, 9, 9]
    WALK_FIRE_ANIME_IDX = [15, 15, 17, 17, 16, 16]

    def __init__(self, win, x, y, map, group):
        ''' 初期化
            Args:
                win(Surface): pygameの画面
                x(int): 初期x座標
                y(int): 初期y座標
                map(Map): マップ
        '''
        # spriteのinit呼び出し
        pygame.sprite.Sprite.__init__(self)
        # 画面オブジェクトを設定
        self.__win = win
        # 矩形
        self._rawrect = pygame.Rect(x, y, 20, 20)
        # マップを設定
        self.__map = map
        # グループを保持
        self.__group = group
        # マップにマリオを設定
        map.mario = self
        # 左右の移動距離
        self._vx = 0
        # 上下の移動距離
        self._vy = 0
        # 累積上昇距離
        self.__ay = 0
        # 地面にいるかどうか
        self.__on_ground = False
        # 画像リスト
        self.__imgs = [
            pygame.image.load('assets/mario001.png'),
            pygame.image.load('assets/mario003.png'),
            pygame.image.load('assets/mario004.png'),
            pygame.image.load('assets/mario005.png'),
            pygame.image.load('assets/mario_jump.png'),
            pygame.image.load('assets/mario_dead.png'),
            pygame.image.load('assets/mariobig.png'),
            pygame.image.load('assets/mariomiddle.png'),
            pygame.image.load('assets/mariobig001.png'),
            pygame.image.load('assets/mariobig002.png'),
            pygame.image.load('assets/mariobig003.png'),
            pygame.image.load('assets/mariobig_jump.png'),
            pygame.image.load('assets/marioswim001.png'),
            pygame.image.load('assets/mariobigswim001.png'),
            pygame.image.load('assets/mariobig_fire.png'),
            pygame.image.load('assets/mariobig_fire001.png'),
            pygame.image.load('assets/mariobig_fire002.png'),
            pygame.image.load('assets/mariobig_fire003.png'),
            pygame.image.load('assets/mariobig_firejump.png')           
        ]
        # 歩くインデックス
        self.__walkidx = 0
        # 向き
        self.__isleft = False
        #　ダッシュしているか
        self.__isdash = False
        # でっかいかどうか
        self.__isbig = False
        # 無敵かどうか
        self.__isinvincible = False
        # 星を持ってるかどうか
        self.__hasstar = False
        # ファイヤマリオかどうか
        self.__isfire = False
        # ステータス
        self._status = Status.NORMAL
        # 死亡カウンター
        self.__deadcounter = 0
        # でっかくなるカウンター
        self.__growcounter = 0
        # 無敵カウンター
        self.__invinciblecounter = 0
        # 味方
        self._arrlies = []
        # 連続踏みつけカウンター
        self.__continuouscounter = 0
        # sprite用
        self.rect = self._rawrect
        self.image = self.__imgs[0]
    
    @property
    def rawrect(self):
        ''' 矩形を取得
        '''
        return self._rawrect
    
    @property
    def vy(self):
        ''' y方向の移動距離を取得
        '''
        return self._vy
    
    @vy.setter
    def vy(self, vy):
        ''' y方向の移動距離を設定
            Args:
                vy(int): 移動距離
        '''
        self._vy = vy
    
    @property
    def status(self):
        ''' 状態を取得
        '''
        return self._status
    
    @status.setter
    def status(self, status):
        ''' 状態を設定
        '''
        self._status = status
    
    @property
    def arrlies(self):
        return self._arrlies

    @property
    def isbig(self):
        return self.__isbig

    @property
    def isinvincible(self):
        return self.__isinvincible

    @isinvincible.setter
    def isinvincible(self, val):
        self.__isinvincible = val
    
    @property
    def invinciblecounter(self):
        return self.__invinciblecounter
    
    @invinciblecounter.setter
    def invinciblecounter(self, val):
        self.__invinciblecounter = val
    
    @property
    def hasstar(self):
        return self.__hasstar
    
    @hasstar.setter
    def hasstar(self, val):
        self.__hasstar = val
    
    @property
    def isfire(self):
        return self.__isfire
    
    @isfire.setter
    def isfire(self, val):
        self.__isfire = val

    @property
    def continuouscounter(self):
        return self.__continuouscounter

    @continuouscounter.setter
    def continuouscounter(self, val):
        self.__continuouscounter = val
    
    def __move(self):
        ''' 移動
        '''
        tmprect = self._rawrect
        tmprect.x += self._vx
        if tmprect.x < self.__map.nowx:
            tmprect.x = self.__map.nowx
            self._vx = 0
        elif not self.__map.chk_collision(tmprect, True):
            self._rawrect = tmprect
        else:
            self._rawrect.x = (self._rawrect.x // self._rawrect.width + (1 if self._vx < 0 else 0)) * self._rawrect.width
            self._vx = 0
    
    def left(self):
        ''' 左に移動
        '''
        if self._status == Status.DEADING:
            return

        # 移動距離計算
        self._vx = self._vx - self.ACC_SPEED_X if self._vx > -1 * (self.DASH_SPEED_X if self.__isdash else self.MAX_SPEED_X) else  -1 * (self.DASH_SPEED_X if self.__isdash else self.MAX_SPEED_X)

        # ジャンプ中は向きを変えない
        if self.__on_ground:
            # 反対向いた時は慣性を0にする
            if not self.__isleft:
                self._vx = 0

            self.__walkidx = (self.__walkidx + 1) % len(self.WALK_ANIME_IDX)
            self.__isleft = True
        self.__move()
    
    def right(self):
        ''' 右に移動
        '''
        if self._status == Status.DEADING:
            return
        
        # 移動距離計算
        self._vx = self._vx + self.ACC_SPEED_X if self._vx < (self.DASH_SPEED_X if self.__isdash else self.MAX_SPEED_X) else (self.DASH_SPEED_X if self.__isdash else self.MAX_SPEED_X)

        # ジャンプ中は向きを変えない
        if self.__on_ground:
            # 反対向いた時は慣性を0にする
            if self.__isleft:
                self._vx = 0
            
            self.__walkidx = (self.__walkidx + 1) % len(self.WALK_ANIME_IDX)
            self.__isleft = False    
        self.__move()    
   
    def jump(self):
        ''' ジャンプ処理
        '''
        if self._status == Status.DEADING:
            return

        # 接地している場合はジャンプを開始する
        if self.__on_ground:
            if abs(self._vx) == self.DASH_SPEED_X:
                # ダッシュの最高スピードの場合
                self._vy -= self.DASH_JUMP_Y
            else:
                self._vy -= self.MAX_JUMP_Y
            self.__ay = 0
        
        # 2段ジャンプ処理
        if self._vy < 0:
            if self.__ay < 65:
                self._vy -= 1
                self.__ay -= self._vy
    
    def stop(self):
        self._vx = self._vx + self.ACC_SPEED_X * (1 if self.__isleft else -1)
        self.__move()
        self.__walkidx = (self.__walkidx + 1) % len(self.WALK_ANIME_IDX)
    
    def fire(self):
        firecount = 0
        for enemy in self.__group.sprites():
            if isinstance(enemy, Fire):
                firecount += 1
        
        if firecount == 2:
            return
        
        fire = Fire(self.__win, self._rawrect.x, self._rawrect.y + 10, -10 if self.__isleft else 10, self.__map, self)
        self.__group.add(fire)
        self._arrlies.append(fire)
        self.__map.sound.playsoundasync(self.__map.sound.playfire)
    
    def __deading(self):
        ''' 死んだ時のアニメーション処理
        '''
        if self.__deadcounter == 0:
            # 初期化
            self._vy = -12
        
        if self.__deadcounter > 10:
            # 10以上でピョーンってする
            self._vy += 1
            self._rawrect.y += self._vy

            if self._rawrect.y > H * 2:
                # 画面外で終わり
                self._status = Status.DEAD
                return
        else:
            self.__deadcounter += 1
    
    def __growing(self):
        if self.__isfire:
            if self.__growcounter == 30:
                self._status = Status.NORMAL
                self.__growcounter = 0
                return
            self.image = self.__getimage()
            self.__changepixel(self.__growcounter % 8 // 2, self.image)
        else:
            if self.__growcounter == 4:
                self._rawrect.y -= 20
                self.image = pygame.transform.flip(self.__imgs[7], self.__isleft, False)
            elif self.__growcounter == 6:
                self._rawrect.y += 20
                self.image = pygame.transform.flip(self.__imgs[0], self.__isleft, False)
            elif self.__growcounter == 8:
                self._rawrect.y -= 20
                self.image = pygame.transform.flip(self.__imgs[7], self.__isleft, False)
            elif self.__growcounter == 10:
                self._rawrect.y += 20
                self.image = pygame.transform.flip(self.__imgs[0], self.__isleft, False)
            elif self.__growcounter == 12:
                self._rawrect.y -= 20
                self.image = pygame.transform.flip(self.__imgs[7], self.__isleft, False)
            elif self.__growcounter == 14:
                self.image = pygame.transform.flip(self.__imgs[6], self.__isleft, False)
            elif self.__growcounter == 16:
                self._rawrect.y += 20
                self.image = pygame.transform.flip(self.__imgs[0], self.__isleft, False)
            elif self.__growcounter == 18:
                self._rawrect.y -= 20
                self.image = pygame.transform.flip(self.__imgs[6], self.__isleft, False)
                self._rawrect.height = 40
                self.__isbig = True
                self._status = Status.NORMAL
                self.__growcounter = 0
                return

        self.__growcounter += 1
    
    def __shrinking(self):
        if self.__growcounter == 0:
            self.image = pygame.transform.flip(self.__imgs[11], self.__isleft, False)
        elif self.__growcounter == 8:
            self.image = pygame.transform.flip(self.__imgs[13], self.__isleft, False)
        elif self.__growcounter == 10:
            self._rawrect.y += 20
            self.image = pygame.transform.flip(self.__imgs[12], self.__isleft, False)
        elif self.__growcounter == 12:
            self._rawrect.y -= 20
            self.image = pygame.transform.flip(self.__imgs[13], self.__isleft, False)
        elif self.__growcounter == 14:
            self._rawrect.y += 20
            self.image = pygame.transform.flip(self.__imgs[12], self.__isleft, False)
        elif self.__growcounter == 16:
            self._rawrect.y -= 20
            self.image = pygame.transform.flip(self.__imgs[13], self.__isleft, False)
        elif self.__growcounter == 18:
            self._rawrect.y += 20
            self.image = pygame.transform.flip(self.__imgs[12], self.__isleft, False)
        elif self.__growcounter == 20:
            self._rawrect.y -= 20
            self.image = pygame.transform.flip(self.__imgs[13], self.__isleft, False)
        elif self.__growcounter == 22:
            self._rawrect.y += 20
            self.image = pygame.transform.flip(self.__imgs[12], self.__isleft, False)
        elif self.__growcounter == 24:
            self._rawrect.y -= 20
            self.image = pygame.transform.flip(self.__imgs[13], self.__isleft, False)
        elif self.__growcounter == 26:
            self._rawrect.y += 20
            self.image = pygame.transform.flip(self.__imgs[12], self.__isleft, False)
        elif self.__growcounter == 28:
            self._rawrect.height = 20
            self.__isbig = False
            self._status = Status.NORMAL
            self.__growcounter = 0
            self.__isinvincible = True
            self.__invinciblecounter = 90
            return


        self.__growcounter += 1
    
    def __changepixel(self, n, image):
        pixels = pygame.surfarray.pixels3d(image)
        if n == 0:
            pixels[..., [0, 1, 2]] = pixels[..., [1, 2, 0]]
        elif n == 1:
            pixels[..., [0, 1, 2]] = pixels[..., [2, 1, 0]]
        elif n == 2:
            pixels[..., [0, 1, 2]] = pixels[..., [0, 2, 1]]
    
    def __getimage(self):
        if self._vx != 0 and self.__on_ground:
            walkidx = self.WALK_ANIME_IDX[self.__walkidx] if not self.__isbig else self.WALK_BIG_ANIME_IDX[self.__walkidx] if not self.__isfire else self.WALK_FIRE_ANIME_IDX[self.__walkidx]
        else:
            walkidx = self.__walkidx if not self.__isbig else (6 if not self.__isfire else 14) if self.__walkidx == 0 else (11 if not self.__isfire else 18)
        return pygame.transform.flip(self.__imgs[walkidx], self.__isleft, False)

    def update(self):
        ''' 更新処理
        '''
        if self._status == Status.DEADING:
            # sprite用に設定
            self.image = self.__imgs[self.IMG_IDX_DEAD]
            self.rect = pygame.Rect(self.__map.get_drawx(self._rawrect), self._rawrect.top, self._rawrect.width, self._rawrect.height)
            self.__deading()
            return

        if self._status == Status.GROWING:
            self.__growing()
            self.rect = pygame.Rect(self.__map.get_drawx(self._rawrect), self._rawrect.top, self._rawrect.width, self._rawrect.height)
            return

        if self._status == Status.SHRINKING:
            self.__shrinking()
            self.image.set_alpha(128)
            self.rect = pygame.Rect(self.__map.get_drawx(self._rawrect), self._rawrect.top, self._rawrect.width, self._rawrect.height)
            return

        # キーボードイベントを取得
        keys = pygame.key.get_pressed()
        # 矢印キーで左右に移動
        if keys[pygame.K_LEFT]:
            self.left()
        if keys[pygame.K_RIGHT]:
            self.right()
        # スペースキーでジャンプ
        if keys[pygame.K_SPACE]:
            self.jump()
        else:
            if self._vy < -5:
                # スペースを離したときにいきなり落下させない
                self._vy = -5
            if self._vy >= 0:
                # 落下開始で通常状態に戻す
                self._status = Status.NORMAL
        
        # SHIFTでダッシュ
        self.__isdash = keys[pygame.K_LSHIFT]
        
        # 止まる処理
        if not keys[pygame.K_LEFT] and not keys[pygame.K_RIGHT] and self._vx != 0:
            self.stop()

        # 重力加速度を上下の移動距離に反映
        self._vy += 1
        # 上下に動かす
        tmprect = self._rawrect
        tmprect.y += self._vy

        if tmprect.y > H + 20:
            self.status = Status.DEAD
            return

        # 接地しているかどうかの判定
        if self.__map.chk_collision(self._rawrect, True):
            #　設置している場合
            heightmargin = tmprect.height -20
            self._rawrect.y = (((tmprect.y + heightmargin) // (tmprect.height - heightmargin) + (1 if self._vy < 0 else 0)) * (tmprect.height - heightmargin)) - heightmargin
            if self._vy > 0:
                self._vy = 0
                self.__on_ground = True
                if self._vx == 0:
                    self.__walkidx = 0
                # 連続踏みつけカウンターを初期化
                self.__continuouscounter = 0
            else:
                self._vy = 1
        else:
            # 設置していない場合
            self._rawrect = tmprect
            self.__on_ground = False
            # アニメーションを止める
            self.__walkidx = 4
        
        # sprite用に設定
        self.image = self.__getimage()
        if self.__isinvincible:
            if self.__hasstar:
                # 星を持っている場合は点滅
                if self.__invinciblecounter < 60:
                    n = self.__invinciblecounter % 16 // 4
                else:
                    n = self.__invinciblecounter % 4
                self.__changepixel(n, self.image)
            else:
                self.image.set_alpha(128)
        else:
            self.image.set_alpha(256)
        self.rect = pygame.Rect(self.__map.get_drawx(self._rawrect), self._rawrect.top, self._rawrect.width, self._rawrect.height)

        # 無敵解除
        if self.__invinciblecounter > 0:
            self.__invinciblecounter -= 1
            if self.__invinciblecounter == 0:
                self.__isinvincible = False
                self.__hasstar = False

class Chara(pygame.sprite.Sprite):
    ''' キャラクターのクラス
    '''
    WALK_SPEED = 10
    COLLAPSE_COUNT = 10

    def __init__(self, win, x, y, dir, map, mario, imgs):
        ''' 初期化
            Args:
                win(Surface): pygameの画面
                x(int): 初期x座標
                y(int): 初期y座標
                dir(int): 移動方向と距離
                map(Map): マップクラス
                mario(Mario): マリオ
        '''
        # sprite初期化呼び出し
        pygame.sprite.Sprite.__init__(self)
        # 画面オブジェクトを設定
        self._win = win
        # 方向と速度
        self._dir = dir
        # Y方向移動距離
        self._vy = 0
        # マップを定義
        self._map = map
        # マリオを定義
        self._mario = mario
        # 画像
        self.__imgs = imgs
        # 歩くインデックス
        self._walkidx = 0
        # 状態 0:通常 1:潰れ中
        self._status = Status.NORMAL
        # 潰れ中カウント
        self._collapsecount = 0
        # 吹っ飛ばされた時の画像
        self._flyingimg = self.__imgs[0]
        # sprite用
        self.rect = self._rawrect
        self.image = self.__imgs[0]
    
    @property
    def rawrect(self):
        ''' 矩形を取得
        '''
        return self._rawrect
    
    @property
    def status(self):
        ''' 状態を取得
        '''
        return self._status
    
    @status.setter
    def status(self, status):
        ''' 状態を設定
        '''
        self._status = status
    
    @property
    def dir(self):
        return self._dir
    
    def commonhittest(self, flyingimg):
        if self._status == Status.NORMAL or self._status == Status.DEADING:
            # スライディング亀とのヒットテスト
            for marioarrly in self._mario.arrlies:
                if self._rawrect.colliderect(marioarrly.rawrect):
                    self._status = Status.FLYING
                    self._flyingimg = flyingimg
                    # 吹っ飛ぶ方向
                    self._dir = 3 if marioarrly.dir > 0 else -3
                    if isinstance(marioarrly, Fire):
                        marioarrly.status = Status.DEADING
                        self._mario.arrlies.remove(marioarrly)
                        self._map.group.add(MiniNumber(self.rect.x, self.rect.y, SCORE_ARRAY[1]))
                    elif isinstance(marioarrly, Kame):
                        self._map.group.add(MiniNumber(self.rect.x, self.rect.y, SCORE_ARRAY[marioarrly.continuouscounter + 2] if marioarrly.continuouscounter + 2 < len(SCORE_ARRAY) else ONEUP_SCORE))
                        marioarrly.continuouscounter += 1
                    # Y方向移動距離を設定
                    self._vy = -8
                    
    def flying(self):
        self._rawrect.x += self._dir
        self._rawrect.y += self._vy
        self._vy += 1
        if self._rawrect.y >= H:
            # 見えなくなったら消去
            self._status = Status.DEAD
            return
        self.rect = pygame.Rect(self._map.get_drawenemyx(self._rawrect), self._rawrect.top, self._rawrect.width, self._rawrect.height)
        self.image = pygame.transform.flip(self._flyingimg, False, True)
    
    def _move(self):
        # x方向に移動
        tmprect = self._rawrect
        tmprect.x += self._dir
        # 壁に当たったら反転
        if self._map.chk_collision(tmprect):
            tmprect.x = (tmprect.x // tmprect.width + (1 if self._dir < 0 else 0)) * tmprect.width
            self._dir *= -1
        
        if self._rawrect.x < self._map.nowx - 20 or self._rawrect.x > self._map.nowx + W + 40:
            self.status = Status.DEAD

        # Y方向に移動
        self._vy += 1
        tmprect.y += self._vy

        if self._rawrect.y > H + 20:
            self.status = Status.DEAD
            return

        # 接地判定
        if yx := self._map.chk_collision(tmprect):
            if self._map.ispushblock(yx):
                self._status = Status.FLYING
                self._flyingimg = self.__imgs[2 if self._status == Status.DEADING else 0]
                # 吹っ飛ぶ方向
                self._dir = 3 if self._rawrect.centerx > self._mario.rawrect.centerx else -3
                self._vy = -8
            else:
                heightmargin = tmprect.height - 20
                tmprect.y = (((tmprect.y + heightmargin) // (tmprect.height - heightmargin) + (1 if self._vy < 0 else 0)) * (tmprect.height - heightmargin)) - heightmargin
                if self._vy > 0:
                    self._vy = 0

        self._rawrect = tmprect


class Kame(Chara):
    def __init__(self, win, x, y, dir, map, mario):
        self.__imgs = [
            pygame.image.load('assets/kame0000.png'),
            pygame.image.load('assets/kame0001.png'),
            pygame.image.load('assets/kame0002.png'),
            pygame.image.load('assets/kame0003.png')
        ]
        # 連続吹っ飛ばしカウンター
        self.__continuouscounter = 0
        # 矩形
        self._rawrect = pygame.Rect(x, y, 20, 30)

        super().__init__(win, x, y, dir, map, mario, self.__imgs)
    
    @property
    def continuouscounter(self):
        return self.__continuouscounter
    
    @continuouscounter.setter
    def continuouscounter(self, val):
        self.__continuouscounter = val
    
    def update(self):
        if self._mario.status == Status.DEADING or self._mario.status == Status.GROWING or self._mario.status == Status.SHRINKING:
            return
        
        if self._status == Status.NORMAL or self._status == Status.SLIDING:
            self._move()
        
        if self._status == Status.DEADING:
            self._collapsecount += 1
            
            if self._collapsecount <= 100:
                self.image = self.__imgs[2]
            else:
                self.image = self.__imgs[3 if self._collapsecount % 10 < 5 else 2]

            if self._collapsecount == 140:
                self._status = Status.NORMAL
                self._rawrect.y -= 10
                self._rawrect.height += 10
                self._collapsecount = 0
        elif self._status == Status.SLIDING:
            self.image = self.__imgs[2]
        elif self._status == Status.FLYING:
            super().flying()
        else:
            self.image = pygame.transform.flip(self.__imgs[self._walkidx < self.WALK_SPEED // 2], self._dir > 0, False)
        self.rect = pygame.Rect(self._map.get_drawenemyx(self._rawrect), self._rawrect.top, self._rawrect.width, self._rawrect.height)

        self._walkidx = (self._walkidx + 1) % self.WALK_SPEED

        # 当たり判定
        if self._rawrect.colliderect(self._mario.rawrect):
            if self._mario.hasstar and self._status != Status.FLYING:
                self._dir = 3 if self._mario.rawrect.x < self._rawrect.x else -3
                self._vy = -8
                self._flyingimg = self.__imgs[2 if self._status == Status.DEADING or self._status == Status.TREADING else 0]
                self._status = Status.FLYING
            else:
                if self._status == Status.NORMAL:
                    # ヒットした場合
                    if self._mario.vy > 0:
                        # 落下中の時だけ敵を踏み潰す
                        self._map.sound.playsoundasync(self._map.sound.playkill)
                        self._status = Status.DEADING
                        self._mario.status = Status.TREADING
                        self._mario.vy = -10
                        self._rawrect.y += 10
                        self._rawrect.height -= 10
                        self._map.group.add(MiniNumber(self.rect.x, self.rect.y, SCORE_ARRAY[self._mario.continuouscounter] if self._mario.continuouscounter < len(SCORE_ARRAY) else ONEUP_SCORE))
                        self._mario.continuouscounter += 1
                    else:
                        if self._mario.status != Status.TREADING and not self._mario.isinvincible:
                            # マリオ死亡
                            if self._mario.isbig:
                                self._mario.status = Status.SHRINKING
                                if self._mario.isfire:
                                    self._mario.isfire = False
                            else:
                                self._mario.status = Status.DEADING
                elif self._status == Status.DEADING:
                    self._map.group.add(MiniNumber(self.rect.x, self.rect.y, SCORE_ARRAY[self._mario.continuouscounter + 2] if self._mario.continuouscounter + 2 < len(SCORE_ARRAY) else ONEUP_SCORE))
                    self._status = Status.SLIDING
                    if self._mario.vy > 0:
                        self._mario.status = Status.TREADING
                        self._mario.vy = -10
                    # スライドする方向を決める
                    self._dir = 8 if self._mario.rawrect.centerx < self._rawrect.centerx else -8
                    self._mario.arrlies.append(self)
                elif self._status == Status.SLIDING:
                    if self._mario.status != Status.TREADING and not self._mario.isinvincible:
                        # マリオ死亡
                        self._mario.status = Status.DEADING if not self._mario.isbig else Status.SHRINKING
        
        super().commonhittest(self.__imgs[2 if self._status == Status.DEADING else 0])

class Kuribo(Chara):
    def __init__(self, win, x, y, dir, map, mario):
        self.__imgs = [
            pygame.image.load('assets/kuribo.png'),
            pygame.image.load('assets/kuribo_death.png')
        ]
        # 矩形
        self._rawrect = pygame.Rect(x, y, 20, 20)

        super().__init__(win, x, y, dir, map, mario, self.__imgs)

    def update(self):
        ''' 移動
        '''
        if self._mario.status == Status.DEADING or self._mario.status == Status.GROWING or self._mario.status == Status.SHRINKING:
            return

        if self._status == Status.NORMAL:
            # 通常状態の場合
            self._move()

            # sprite用に値を設定
            self.image = pygame.transform.flip(self.__imgs[0], self._walkidx < self.WALK_SPEED // 2, False)
            self.rect = pygame.Rect(self._map.get_drawenemyx(self._rawrect), self._rawrect.top, self._rawrect.width, self._rawrect.height)
        elif self._status == Status.DEADING:
            # 潰れ中の場合
            self.image = self.__imgs[1]
            self.rect = pygame.Rect(self._map.get_drawenemyx(self._rawrect), self._rawrect.top, self._rawrect.width, self._rawrect.height)
            # 潰れちゅうカウンタをインクリメント
            self._collapsecount += 1
            if self._collapsecount == self.COLLAPSE_COUNT:
                # カウンタが10になったら消去
                self._status = Status.DEAD
                return
        elif self._status == Status.FLYING:
            super().flying()

        # 歩くインデックスをインクリメントし10でループ
        self._walkidx = (self._walkidx + 1) % self.WALK_SPEED

        if self._status == Status.DEAD:
            return

        # 当たり判定
        if self._status == Status.NORMAL and self._rawrect.colliderect(self._mario.rawrect):
            # ヒットした場合
            if self._mario.vy > 0:
                # 落下中の時だけ敵を踏み潰す
                self._map.sound.playsoundasync(self._map.sound.playkill)
                self._status = Status.DEADING
                self._mario.status = Status.TREADING
                self._mario.vy = -10
                self._map.group.add(MiniNumber(self.rect.x, self.rect.y, SCORE_ARRAY[self._mario.continuouscounter] if self._mario.continuouscounter < len(SCORE_ARRAY) else ONEUP_SCORE))
                self._mario.continuouscounter += 1
            else:
                if self._mario.status != Status.TREADING and not self._mario.isinvincible:
                    # マリオ死亡
                    if self._mario.isbig:
                        self._mario.status = Status.SHRINKING
                        if self._mario.isfire:
                            self._mario.isfire = False
                    else:
                        self._mario.status = Status.DEADING
                elif self._mario.hasstar:
                    self._status = Status.FLYING
                    self._dir = 3 if self._mario.rawrect.x < self._rawrect.x else -3
                    self._vy = -8
                    self._map.group.add(MiniNumber(self.rect.x, self.rect.y, SCORE_ARRAY[1]))
        
        super().commonhittest(self.__imgs[0])

class Kinoko(Chara):
    def __init__(self, win, x, y, dir, map, mario):
        # ファイヤフラワカどうか
        self.__isflower = False
        self.__imgs = [
            pygame.image.load('assets/kinoko.png'),
            pygame.image.load('assets/flower.png')
        ]
        # 矩形
        self._rawrect = pygame.Rect(x, y, 20, 20)
        super().__init__(win, x, y, dir, map, mario, self.__imgs)
    
    def update(self):
        if self._mario.status == Status.DEADING or self._mario.status == Status.GROWING or self._mario.status == Status.SHRINKING:
            return

        if self._status == Status.NORMAL:
            x, y = self._rawrect.x // 20, self._rawrect.y // 20
            if self._map.ispushblock((y, x)):
                self._map.sound.playsoundasync(self._map.sound.playgetitem)
                self._status = Status.TREADING
                self._rawrect.y -= 5
                self.__isflower = self._mario.isbig
            self.image.set_alpha(0)
        elif self._status == Status.TREADING:
            self._walkidx += 1
            if self._walkidx == 4:
                self.image.set_alpha(256)
            if self._walkidx <= 15:
                self._rawrect.y -= 1
            if self._walkidx == 18:
                self._status = Status.FLYING
        elif self._status == Status.FLYING:
            if not self.__isflower:
                tmprect = self._rawrect
                tmprect.x += self._dir
                # 壁に当たったら反転
                if self._map.chk_collision(tmprect):
                    tmprect.x = (tmprect.x // tmprect.width + (1 if self._dir < 0 else 0)) * tmprect.width
                    self._dir *= -1

                # Y軸方向に移動
                self._vy += 1
                tmprect.y += self._vy

                if self._map.chk_collision(tmprect):
                    tmprect.y = ((tmprect.y // tmprect.height + (1 if self._vy < 0 else 0)) * tmprect.height)
                    self._vy = 0
                    
                if self._rawrect.x < self._map.nowx -20 or self._rawrect.x > self._map.nowx + W + 40:
                    self.status = Status.DEAD
                    return
                
                if self._rawrect.y > H + 20:
                    self.status = Status.DEAD
                    return
                
                self._rawrect = tmprect

            # 当たり判定
            if self._rawrect.colliderect(self._mario.rawrect):
                if not self._mario.isfire:
                    self._mario.status = Status.GROWING
                    self._map.sound.playsoundasync(self._map.sound.playpower)
                    if self.__isflower:
                        self._mario.isfire = True
                self._status = Status.DEAD
                self._map.group.add(MiniNumber(self.rect.x, self.rect.y, 1000))

        self.rect = pygame.Rect(self._map.get_drawenemyx(self._rawrect), self._rawrect.top, self._rawrect.width, self._rawrect.height)
        self.image = self.__imgs[0 if not self.__isflower else 1]

class BrokenBlock(Chara):
    def __init__(self, win, x, y, dir, vy, map):
        self.__imgs = [
            pygame.image.load('assets/brokenblock.png')
        ]
        self._rawrect = pygame.Rect(x, y, 10, 10)
        super().__init__(win, x, y, dir, map, None, self.__imgs)
        self._vy = vy
    
    def update(self):
        super().flying()

class Star(Chara):
    def __init__(self, win, x, y, dir, map, mario):
        self.__imgs = [
            pygame.image.load('assets/star.png')
        ]
        self._rawrect = pygame.Rect(x, y, 20, 20)
        super().__init__(win, x, y, dir, map, mario, self.__imgs)
    
    def update(self):
        if self._mario.status == Status.DEADING or self._mario.status == Status.GROWING or self._mario.status == Status.SHRINKING:
            return

        if self._status == Status.NORMAL:
            x, y = self._rawrect.x // 20, self._rawrect.y // 20
            if self._map.ispushblock((y, x)):
                self._map.sound.playsoundasync(self._map.sound.playgetitem)
                self._status = Status.TREADING
                self._rawrect.y -= 5
            self.image.set_alpha(0)
        elif self._status == Status.TREADING:
            self._walkidx += 1
            if self._walkidx == 4:
                self.image.set_alpha(256)
            if self._walkidx <= 15:
                self._rawrect.y -= 1
            if self._walkidx == 18:
                self._vy = -10
                self._status = Status.FLYING
        elif self._status == Status.FLYING:
            tmprect = self._rawrect
            tmprect.x += self._dir
            # 壁に当たったら反転
            if self._map.chk_collision(tmprect):
                tmprect.x = (tmprect.x // tmprect.width + (1 if self._dir < 0 else 0)) * tmprect.width
                self._dir *= -1
            
            # Y軸方向に移動
            self._vy += 1
            tmprect.y += self._vy
            
            if self._map.chk_collision(tmprect):
                tmprect.y = ((tmprect.y // tmprect.height + (1 if self._vy < 0 else 0)) * tmprect.height)
                if self._vy > 0:
                    self._vy = -10
                else:
                    self._vy = 0

            if self._rawrect.x < self._map.nowx -20 or self._rawrect.x > self._map.nowx + W + 40:
                self.status = Status.DEAD
                return
            
            if self._rawrect.y > H + 20:
                self.status = Status.DEAD
                return
            
            self._rawrect = tmprect

            # 当たり判定
            if self._rawrect.colliderect(self._mario.rawrect):
                self._mario.hasstar = True
                self._mario.isinvincible = True
                self._mario.invinciblecounter = 360
                self._status = Status.DEAD
                self._map.sound.playsoundasync(self._map.sound.playpower)
                self._map.group.add(MiniNumber(self.rect.x, self.rect.y, 1000))
        
        self.rect = pygame.Rect(self._map.get_drawenemyx(self._rawrect), self._rawrect.top, self._rawrect.width, self._rawrect.height)

class Fire(Chara):
    def __init__(self, win, x, y, dir, map, mario):
        self.__imgs = [
            pygame.image.load('assets/fire.png'),
            pygame.image.load('assets/fire_bom001.png'),
            pygame.image.load('assets/fire_bom002.png')
        ]
        self._rawrect = pygame.Rect(x, y, 10, 10)
        super().__init__(win, x, y, dir, map, mario, self.__imgs)
    
    def update(self):
        if self._mario.status == Status.DEADING or self._mario.status == Status.GROWING or self._mario.status == Status.SHRINKING:
            return

        if self._status == Status.NORMAL:
            tmprect = self._rawrect

            # Y軸方向に移動
            self._vy += 1
            if self._vy > 10:
                self._vy = 10
            tmprect.y += self._vy

            if self._map.chk_collision(tmprect):
                tmprect.y = ((tmprect.y // tmprect.height + (1 if self._vy < 0 else 0)) * tmprect.height)
                if self._vy > 0:
                    self._vy = -7
                else:
                    self._vy = 0
            
            tmprect.x += self._dir

            if self._map.chk_collision(tmprect):
                self._status = Status.DEADING
                return
            
            if self._rawrect.x < self._map.nowx -20 or self._rawrect.x > self._map.nowx + W + 40:
                self.status = Status.DEAD
                return
            
            if self._rawrect.y > H + 20:
                self.status = Status.DEAD
                return

            self._rawrect = tmprect
            self.image = pygame.transform.rotate(self.__imgs[0], (self._walkidx % 4) * 90)
            self._walkidx += 1
        elif self._status == Status.DEADING:
            if self._collapsecount < 2:
                self.image = self.__imgs[1]
            elif self._collapsecount < 4:
                self.image = self.__imgs[2]
            else:
                self._status = Status.DEAD
                return

            self._collapsecount += 1

        self.rect = pygame.Rect(self._map.get_drawenemyx(self._rawrect), self._rawrect.top, self._rawrect.width, self._rawrect.height)

class Coin(Chara):
    ANIME_IDX = [0, 1, 3, 2]
    def __init__(self, win, x, y, dir, map, mario):
        self.__imgs = [
            pygame.image.load('assets/coin001.png'),
            pygame.image.load('assets/coin002.png'),
            pygame.image.load('assets/coin003.png'),
            pygame.image.load('assets/coin004.png'),
        ]
        self._rawrect = pygame.Rect(x, y, 20, 20)
        super().__init__(win, x, y, dir, map, mario, self.__imgs)

    def update(self):
        if self._mario.status == Status.DEADING or self._mario.status == Status.GROWING or self._mario.status == Status.SHRINKING:
            return

        if self._status == Status.NORMAL:
            x, y = self._rawrect.x // 20, self._rawrect.y // 20
            if self._map.ispushblock((y, x)):
                self._map.sound.playsoundasync(self._map.sound.playcoin)
                self._status = Status.FLYING
                self._vy = -15
                self._rawrect.y -= 20
                return
            self.image.set_alpha(0)
        elif self._status == Status.FLYING:
            self.image.set_alpha(256)
            self._vy += 2
            self._rawrect.y += self._vy
            if self._vy > 10:
                self._status = Status.DEAD
                self._map.group.add(MiniNumber(self.rect.x, self.rect.y, 200))
                return
            self.image = self.__imgs[self.ANIME_IDX[self._walkidx % 4]]
            self._walkidx += 1
        
        self.rect = pygame.Rect(self._map.get_drawenemyx(self._rawrect), self._rawrect.top, self._rawrect.width, self._rawrect.height)

class MiniNumber(pygame.sprite.Sprite):

    @property
    def status(self):
        return self.__status

    def __init__(self, x, y, number):
        # spriteのinit呼び出し
        pygame.sprite.Sprite.__init__(self)
        self.__status = Status.NORMAL
        self.__counter = 0
        self.image = pygame.image.load('assets/1up.png') if number == ONEUP_SCORE else self.__createsurface(number)
        self.rect = pygame.Rect(x, y, self.image.get_width(), 10)

    def __createsurface(self, n):
        numlist = []
        while n != 0:
            numlist.append(n % 10)
            n = n // 10
        numlist.reverse()
        img = pygame.image.load('assets/number_mini.png')

        surface = pygame.Surface((5 * len(numlist), 10), pygame.SRCALPHA)
        for nidx, n in enumerate(numlist):
            surface.blit(img.subsurface(pygame.Rect(n * 5, 0, 5, 10)), (5 * nidx, 0))
        
        return surface
    
    def update(self):
        self.rect.y -= 1
        if self.__counter == 30:
            self.__status = Status.DEAD
        self.__counter += 1

class Sound():
    FREQ_C = 261.63
    FREQ_CS = 277.18
    FREQ_D = 293.66
    FREQ_DS = 311.13
    FREQ_E = 329.63
    FREQ_F = 349.23
    FREQ_FS = 369.99
    FREQ_G = 392.00
    FREQ_GS = 415.30
    FREQ_A = 440.00
    FREQ_AS = 466.16
    FREQ_B = 493.88

    def __init__(self):
        self._sample_rate = 44100

        # コインの音源作成
        self.__coindurs = [0.1, 0.7]
        coinfreqs = [self.FREQ_B * 2, self.FREQ_E * 4]
        coinfades = [False, True]
        self._coin_sounds = self._make_sounds(coinfreqs, self.__coindurs, coinfades)

        # アイテム出現
        self.__itemdurs = [0.04] * 8
        itemfreqs = [self.FREQ_C, self.FREQ_GS, self.FREQ_CS, self.FREQ_A, self.FREQ_D, self.FREQ_AS, self.FREQ_DS, self.FREQ_AS]
        self._item_sounds = self._make_sounds(itemfreqs, self.__itemdurs, [False] * 8)

        # パワーアップ
        powerfreqs = [
            self.FREQ_C * 2, self.FREQ_G, self.FREQ_C * 2, self.FREQ_E * 2, self.FREQ_G * 2, self.FREQ_C * 4, self.FREQ_G * 2, self.FREQ_GS, self.FREQ_C * 2, self.FREQ_DS * 2, self.FREQ_GS * 2, self.FREQ_DS * 2, self.FREQ_GS * 2, self.FREQ_C * 4, self.FREQ_DS * 4, self.FREQ_GS * 4, self.FREQ_DS * 4, self.FREQ_AS, self.FREQ_D * 2, self.FREQ_F * 2, self.FREQ_AS * 2, self.FREQ_F * 2, self.FREQ_AS * 2, self.FREQ_F * 4, self.FREQ_AS * 4, self.FREQ_F * 4
        ]
        self.__powerdurs = [0.03] * len(powerfreqs)
        self._power_sounds = self._make_sounds(powerfreqs, self.__powerdurs, [False] * len(powerfreqs))

        # ファイア
        firefreqs = [self.FREQ_G, self.FREQ_G * 2, self.FREQ_G * 4]
        self.__firedurs = [0.02] * len(firefreqs)
        self._fire_sounds = self._make_sounds(firefreqs, self.__firedurs, [False] * len(firefreqs))

        # 潰す
        killfreqs = [self.FREQ_C * 2, self.FREQ_F * 2]
        self.__killdurs = [0.05] * 2
        self._kill_sounds = self._make_sounds(killfreqs, self.__killdurs, [False] * len(killfreqs))
    
        # BGM
        bbt = 0.15
        bgmfreqsA = [self.FREQ_E * 2, self.FREQ_E * 2, None, self.FREQ_E * 2, None, self.FREQ_C * 2, self.FREQ_E * 2, None,
                     self.FREQ_G * 2, None, None, None,
                     self.FREQ_C * 2, None, self.FREQ_G, None, self.FREQ_E, None,
                     None, self.FREQ_A, None, self.FREQ_B, None, self.FREQ_AS, self.FREQ_A, None,
                     self.FREQ_G, self.FREQ_E * 2, self.FREQ_G * 2, self.FREQ_A * 2, None, self.FREQ_F * 2, self.FREQ_G * 2,
                     None, self.FREQ_E * 2, None, self.FREQ_C * 2, self.FREQ_D * 2, self.FREQ_B, None,
                     self.FREQ_C * 2, None, self.FREQ_G, None, self.FREQ_E, None,
                     None, self.FREQ_A, None, self.FREQ_B, None, self.FREQ_AS, self.FREQ_A, None,
                     self.FREQ_G, self.FREQ_E * 2, self.FREQ_G * 2, self.FREQ_A * 2, None, self.FREQ_F * 2, self.FREQ_G * 2,
                     None, self.FREQ_E * 2, None, self.FREQ_C * 2, self.FREQ_D * 2, self.FREQ_B, None]
        bgmfreqsB = [self.FREQ_FS, self.FREQ_FS, None, self.FREQ_FS, None, self.FREQ_FS, self.FREQ_FS, None,
                     self.FREQ_B, None, self.FREQ_G, None,
                     self.FREQ_E, None, self.FREQ_C, None, self.FREQ_G / 2, None,
                     None, self.FREQ_C, None, self.FREQ_D, None, self.FREQ_CS, self.FREQ_C, None,
                     self.FREQ_E, None, self.FREQ_C * 2, self.FREQ_C * 2, None, self.FREQ_C * 2, self.FREQ_C * 2,
                     None, self.FREQ_G, None, self.FREQ_E, self.FREQ_F, self.FREQ_D, None,
                     self.FREQ_E, None, self.FREQ_C, None, self.FREQ_G / 2, None,
                     None, self.FREQ_C, None, self.FREQ_D, None, self.FREQ_CS, self.FREQ_C, None,
                     self.FREQ_E, None, self.FREQ_C * 2, self.FREQ_C * 2, None, self.FREQ_C * 2, self.FREQ_C * 2,
                     None, self.FREQ_G, None, self.FREQ_E, self.FREQ_F, self.FREQ_D, None]
        bgmfreqsC = [self.FREQ_D / 2, self.FREQ_D / 2, None, self.FREQ_D / 2, None, self.FREQ_D / 2, self.FREQ_D / 2, None,
                     self.FREQ_G / 2, None, self.FREQ_G / 4, None,
                     self.FREQ_G / 2, None, self.FREQ_E / 2, None, self.FREQ_C / 2, None,
                     None, self.FREQ_F / 2, None, self.FREQ_G / 2, None, self.FREQ_FS / 2, self.FREQ_F / 2, None,
                     self.FREQ_E / 2, self.FREQ_C, self.FREQ_E, self.FREQ_F, None, self.FREQ_D, self.FREQ_E,
                     None, self.FREQ_C, None, self.FREQ_A, self.FREQ_B, self.FREQ_G, None,
                     self.FREQ_G / 2, None, self.FREQ_E / 2, None, self.FREQ_C / 2, None,
                     None, self.FREQ_F / 2, None, self.FREQ_G / 2, None, self.FREQ_FS / 2, self.FREQ_F / 2, None,
                     self.FREQ_E / 2, self.FREQ_C, self.FREQ_E, self.FREQ_F, None, self.FREQ_D, self.FREQ_E,
                     None, self.FREQ_C, None, self.FREQ_A, self.FREQ_B, self.FREQ_G, None]
        self.__bgmdursA = [bbt, bbt, bbt, bbt, bbt, bbt, bbt, bbt,
                           bbt, bbt * 3, bbt, bbt * 3,
                           bbt, bbt * 2, bbt, bbt * 2, bbt, bbt,
                           bbt, bbt, bbt, bbt, bbt, bbt, bbt, bbt,
                           bbt * 4 / 3, bbt * 4 / 3, bbt * 4 / 3, bbt, bbt, bbt, bbt,
                           bbt, bbt, bbt, bbt, bbt, bbt, bbt * 2,
                           bbt, bbt * 2, bbt, bbt * 2, bbt, bbt,
                           bbt, bbt, bbt, bbt, bbt, bbt, bbt, bbt,
                           bbt * 4 / 3, bbt * 4 / 3, bbt * 4 / 3, bbt, bbt, bbt, bbt,
                           bbt, bbt, bbt, bbt, bbt, bbt, bbt * 2]
        self.__bgmdursB = [bbt, bbt, bbt, bbt, bbt, bbt, bbt, bbt,
                           bbt, bbt * 3, bbt, bbt * 3,
                           bbt, bbt * 2, bbt, bbt * 2, bbt, bbt,
                           bbt, bbt, bbt, bbt, bbt, bbt, bbt, bbt,
                           bbt * 4 / 3, bbt * 4 / 3, bbt * 4 / 3, bbt, bbt, bbt, bbt,
                           bbt, bbt, bbt, bbt, bbt, bbt, bbt * 2,
                           bbt, bbt * 2, bbt, bbt * 2, bbt, bbt,
                           bbt, bbt, bbt, bbt, bbt, bbt, bbt, bbt,
                           bbt * 4 / 3, bbt * 4 / 3, bbt * 4 / 3, bbt, bbt, bbt, bbt,
                           bbt, bbt, bbt, bbt, bbt, bbt, bbt * 2]
        self.__bgmdursC = [bbt, bbt, bbt, bbt, bbt, bbt, bbt, bbt,
                           bbt, bbt * 3, bbt, bbt * 3,
                           bbt, bbt * 2, bbt, bbt * 2, bbt, bbt,
                           bbt, bbt, bbt, bbt, bbt, bbt, bbt, bbt,
                           bbt * 4 / 3, bbt * 4 / 3, bbt * 4 / 3, bbt, bbt, bbt, bbt,
                           bbt, bbt, bbt, bbt, bbt, bbt, bbt * 2,
                           bbt, bbt * 2, bbt, bbt * 2, bbt, bbt,
                           bbt, bbt, bbt, bbt, bbt, bbt, bbt, bbt,
                           bbt * 4 / 3, bbt * 4 / 3, bbt * 4 / 3, bbt, bbt, bbt, bbt,
                           bbt, bbt, bbt, bbt, bbt, bbt, bbt * 2]
        self._bgm_soundsA = self._make_sounds(bgmfreqsA, self.__bgmdursA, [False] * len(bgmfreqsA))
        self._bgm_soundsB = self._make_sounds(bgmfreqsB, self.__bgmdursB, [False] * len(bgmfreqsB))
        self._bgm_soundsC = self._make_sounds(bgmfreqsC, self.__bgmdursC, [False] * len(bgmfreqsC))

    def _make_sounds(self, freqs, durs, fades):
        return [self._make_square_sound(freq, dur, fade) if freq else None for freq, dur, fade in zip(freqs, durs, fades)]

    def _make_square_sound(self, freq, duration, fadeout=False):
        t = np.linspace(0, duration, int(self._sample_rate * duration), endpoint=False)
        waveform = 0.125 * signal.square(2 * np.pi * freq * t)
        if fadeout:
            waveform *= np.exp(-5 * t)
        return pygame.sndarray.make_sound(np.int16(waveform * 32767))
    
    def playsoundasync(self, func):
        threading.Thread(target=func).start()

    def playsounds(self, sounds, durs):
        for sound, dur in zip(sounds, durs):
            if sound:
                sound.play()
            pygame.time.wait(int(dur * 1000))

    def playcoin(self):
        self.playsounds(self._coin_sounds, self.__coindurs)
    
    def playgetitem(self):
        self.playsounds(self._item_sounds, self.__itemdurs)
    
    def playpower(self):
        self.playsounds(self._power_sounds, self.__powerdurs)
    
    def playfire(self):
        self.playsounds(self._fire_sounds, self.__firedurs)
    
    def playkill(self):
        self.playsounds(self._kill_sounds, self.__killdurs)
    
    def playbgmA(self):
        self.playsounds(self._bgm_soundsA, self.__bgmdursA)

    def playbgmB(self):
        self.playsounds(self._bgm_soundsB, self.__bgmdursB)

    def playbgmC(self):
        self.playsounds(self._bgm_soundsC, self.__bgmdursC)

def init(win):
    # sprite groupを構築
    group = pygame.sprite.RenderUpdates()
    groupback = pygame.sprite.RenderUpdates()

    # マップを構築
    map = Map(win, group, groupback)
    # マリオを構築
    mario = Mario(win, 50, 220, map, group)
    # グループに追加
    group.add(mario)
    
    return group, groupback, map, mario


def main():
    ''' メイン関数
    '''
    # pygameライブラリを初期化
    pygame.mixer.pre_init(frequency=44100, size=-16, channels=1)
    pygame.init()

    # 画面を作成
    win = pygame.display.set_mode((W,H))
    # タイマーを生成
    clock = pygame.time.Clock()

    # 初期化呼び出し
    group, groupback, map, mario = init(win)

    # イベントループ
    while True:
        # イベント処理
        for e in pygame.event.get():
            if e.type == pygame.QUIT:
                # 閉じる
                exit()
            elif e.type == pygame.KEYDOWN:
                if e.key == pygame.K_LSHIFT and mario.isfire:
                    mario.fire()
        
        groupback.update()
        # マリオを更新
        group.update()

        # マリオが死んだら最初から
        if mario.status == Status.DEAD:
            # 初期化呼び出し
            group, groupback, map, mario = init(win)
            continue
        
        for enemy in group.sprites():
            if enemy.status == Status.DEAD:
                group.remove(enemy)
        
        for enemy in groupback.sprites():
            if enemy.status == Status.DEAD:
                groupback.remove(enemy)

        # 背景を塗りつぶし
        win.fill((90, 147, 255))
        groupback.draw(win)
        # マップを描画
        map.draw(mario.rawrect)
        # グループを描画
        group.draw(win)

        # 画面全体を更新
        pygame.display.flip()
        # 30フレーム/秒で動作させる
        clock.tick(30)

if __name__ == '__main__':
    # メイン関数呼び出し
    main()